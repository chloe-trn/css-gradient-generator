{"version":3,"sources":["components/Gradient.js","components/Output.js","components/Color.js","App.js","index.js"],"names":["Gradient","gradient","className","style","Output","text","useState","copied","setCopied","copy","useCallback","copyToClipboard","useEffect","console","log","textCopy","document","createElement","value","position","left","body","appendChild","select","execCommand","removeChild","onClick","Color","percent","colorCode","handleColorChooser","handlePercentChange","keysAvailable","type","defaultValue","maxLength","onKeyUp","onKeyDown","e","includes","key","preventDefault","onChange","App","percentOne","colorCodeOne","percentTwo","colorCodeTwo","percentThree","colorCodeThree","color","setColor","background","setGradient","updateColor","index","target","parentElement","targetIndex","Array","from","children","indexOf","hexValue","alert","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1c5b19e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Gradient = ({gradient}) => {\r\n    return (\r\n        <div className=\"gradient\" style={gradient}></div>\r\n    );\r\n}\r\n\r\nexport default Gradient;","import React, { useState, useCallback, useEffect } from 'react';\r\n\r\nconst Output = ({text}) => {\r\n\r\n    const [copied, setCopied] = useState(false);\r\n\r\n    // copy to clipboard and set state in callback\r\n    const copy = useCallback(() => {\r\n        copyToClipboard(text);\r\n        setCopied(true);\r\n    }, [text]);\r\n\r\n    // set copied state back to false whenever text changes\r\n    useEffect(()=>{\r\n        console.log(copied);\r\n    },[copied]);\r\n\r\n    useEffect(() => {\r\n        setCopied(false);\r\n    }, [text]);\r\n\r\n    const copyToClipboard = text => {\r\n        // create a DOM element to hold the copied text \r\n        const textCopy = document.createElement('textarea');\r\n        textCopy.value = text + ';'; \r\n        // position copied text offscreen\r\n        textCopy.style.position = 'absolute';\r\n        textCopy.style.left = '-9999px';\r\n        document.body.appendChild(textCopy);\r\n        // select the text and copy to clipboard\r\n        textCopy.select();\r\n        document.execCommand('copy');\r\n        // remove the DOM element - clean up \r\n        document.body.removeChild(textCopy);\r\n        // setCopied(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"css-output\" onClick={copy}>\r\n            <p>background: {text};</p>\r\n            <p className=\"copied-confirm\">{copied && 'Code Copied!'}</p>\r\n            <div className=\"copy-msg\">Click anywhere in this text area to copy the code to your clipboard.</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Output;","import React from 'react';\r\n\r\nconst Color = ({percent,colorCode,handleColorChooser,handlePercentChange}) => {\r\n\r\n    // defines which keys can be used in the input number picker \r\n    const keysAvailable = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\r\n    \"Backspace\",\"ArrowRight\",\"ArrowLeft\"];\r\n\r\n    // allow only keys defined when user is typing in number input field \r\n    const handleTyping = (e) => {\r\n        if(!keysAvailable.includes(e.key)){e.preventDefault();}\r\n    } \r\n\r\n  return (\r\n    <div className=\"color\">\r\n        <input \r\n            className=\"percent\"\r\n            type=\"text\"\r\n            defaultValue={percent} \r\n            maxLength=\"3\" \r\n            onKeyUp={handlePercentChange}\r\n            onKeyDown={handleTyping} \r\n        />\r\n        <input className=\"color-choose\" type=\"color\" value={colorCode} onChange={handleColorChooser}/>\r\n        <input className=\"hex-display\" type=\"text\" value={colorCode} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Color;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Gradient from './components/Gradient';\nimport Output from './components/Output';\nimport Color from './components/Color';\n\nfunction App() {\n\n  // set initial 3 colors \n  const [color, setColor] = useState({\n    percentOne: \"0\",\n    colorCodeOne: \"#a872ee\",\n    percentTwo: \"50\",\n    colorCodeTwo: \"#cf8bf3\", \n    percentThree: \"100\",\n    colorCodeThree: \"#fdb99b\"\n  });\n  const {percentOne,colorCodeOne,percentTwo,colorCodeTwo,percentThree,colorCodeThree} = color; \n\n  // set initial gradient \n  const [gradient, setGradient] = useState({\n      background: `linear-gradient(\n          90deg, \n          ${colorCodeOne} ${percentOne}%, \n          ${colorCodeTwo} ${percentTwo}%, \n          ${colorCodeThree} ${percentThree}%\n      )`\n  });\n  const {background} = gradient;\n  \n  // whenever a color updates, update the gradient text \n  useEffect(()=>{\n    console.log(\"side-effect\");\n    console.log(color);\n    setGradient({\n      background: `linear-gradient(\n        90deg, \n        ${colorCodeOne} ${percentOne}%, \n        ${colorCodeTwo} ${percentTwo}%, \n        ${colorCodeThree} ${percentThree}%\n      )`\n    });\n  },[color]);\n\n  // handles color state updates based on user input values\n  const updateColor = (key,index,value) => {\n    if( key === \"colorCode\"){\n      if(index === 0){\n        setColor({\n          ...color,\n          colorCodeOne: value\n        });\n      }else if (index === 1){\n        setColor({\n          ...color,\n          colorCodeTwo: value\n        });\n      }else{\n        setColor({\n          ...color,\n          colorCodeThree: value\n        });\n      }\n    }else{\n      if(index === 0){\n        setColor({\n          ...color,\n          percentOne: value\n        });\n      }else if (index === 1){\n            setColor({\n                ...color,\n                percentTwo: value\n            });\n        }else{\n            setColor({\n              ...color,\n              percentThree: value\n            });\n        }\n    }\n  }\n\n  // receive a new color from the color pickers \n  const handleColorChooser = (e) => { \n    const target = e.target.parentElement;\n    const targetIndex = Array.from(target.parentElement.children).indexOf(target);\n    const hexValue = e.target.value; \n    updateColor(\"colorCode\",targetIndex,hexValue);\n  }\n\n  // recieve a new percentage from the percent input fields\n  const handlePercentChange = (e) => {\n    const percent = e.target.value; \n    if(percent > 100 || percent < 0){\n        alert(\"Please enter a percentage value from 0 - 100\");\n    }else{\n        const target = e.target.parentElement;\n        const targetIndex = Array.from(target.parentElement.children).indexOf(target);\n        updateColor(\"percent\",targetIndex,percent);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Gradient \n        gradient={gradient}\n      /> \n      <div className=\"controls\">\n        <h1>Gradient Generator</h1>\n        <div className=\"colors-control\">\n          <Color \n            percent={percentOne} \n            colorCode={colorCodeOne} \n            handleColorChooser={handleColorChooser} \n            handlePercentChange={handlePercentChange}\n          /> \n          <Color \n            percent={percentTwo}\n            colorCode={colorCodeTwo} \n            handleColorChooser={handleColorChooser}\n            handlePercentChange={handlePercentChange}  \n          /> \n          <Color \n            percent={percentThree}\n            colorCode={colorCodeThree} \n            handleColorChooser={handleColorChooser}\n            handlePercentChange={handlePercentChange} \n          /> \n          <Output text={background} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}